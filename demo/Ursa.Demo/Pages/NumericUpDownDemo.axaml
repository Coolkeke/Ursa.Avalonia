<UserControl
    x:Class="VariableBox.Demo.Pages.NumericUpDownDemo"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:v="using:VariableBox.Controls"
    xmlns:vm="using:VariableBox.Demo.ViewModels"
    d:DesignHeight="450"
    d:DesignWidth="800"
    x:CompileBindings="True"
    x:DataType="vm:NumericUpDownDemoViewModel"
    mc:Ignorable="d">

    <UserControl.Styles>
        <Style Selector=":is(v|NumericUpDown)">
            <Setter Property="Width" Value="240" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
        </Style>
    </UserControl.Styles>

    <Grid ColumnDefinitions="300,auto,*" RowDefinitions="auto,*">

        <Expander
            Margin="2"
            BorderBrush="AliceBlue"
            BorderThickness="2"
            Header="Demo"
            IsExpanded="True">
            <StackPanel
                Grid.ColumnSpan="1"
                Margin="10"
                HorizontalAlignment="Stretch">
                <v:NumericUIntUpDown
                    Name="numd"
                    Width="{Binding Width}"
                    HorizontalAlignment="{Binding HorizontalAlignment}"
                    HorizontalContentAlignment="{Binding HorizontalContentAlignment}"
                    AllowDrag="{Binding AllowDrag}"
                    AllowSpin="{Binding AllowSpin}"
                    Command="{Binding TrythisCommand}"
                    FontFamily="{Binding FontFamily, Mode=OneWay}"
                    FormatString="{Binding FormatString}"
                    InnerLeftContent="{Binding InnerLeftContent}"
                    IsEnabled="{Binding IsEnable}"
                    IsReadOnly="{Binding IsReadOnly}"
                    IsShowReadButton="{Binding IsShowReadButton}"
                    IsShowWriteButton="{Binding IsShowWriteButton}"
                    Maximum="{Binding Maximum}"
                    Minimum="{Binding Minimum}"
                    ParsingNumberStyle="{Binding ParsingNumberStyle}"
                    ReadCommand="{Binding TrythisReadCommand}"
                    ShowButtonSpinner="{Binding ShowButtonSpinner}"
                    Step="{Binding Step}"
                    Watermark="{Binding Watermark}"
                    Value="{Binding Value}" />
                <Button Content="ValueChange(Write)" />
                <TextBox
                    Width="NaN"
                    HorizontalAlignment="Center"
                    IsReadOnly="true"
                    Text="{Binding CommandUpdateText}" />
                <TextBox
                    Width="NaN"
                    HorizontalAlignment="Center"
                    IsReadOnly="true"
                    Text="{Binding ValueChangedUpdateText}" />
                <Button Content="Read" />
                <TextBox
                    Width="NaN"
                    HorizontalAlignment="Center"
                    IsReadOnly="true"
                    Text="{Binding ReadCommandUpdateText}" />
                <TextBox
                    Width="NaN"
                    HorizontalAlignment="Center"
                    IsReadOnly="true"
                    Text="{Binding ReadRequestedUpdateText}" />
                <Button Content="Demo" />
            </StackPanel>

        </Expander>
        <Grid
            Grid.Row="1"
            Grid.Column="0"
            Margin="10"
            HorizontalAlignment="Left">
            <StackPanel Grid.Row="1">
                <v:NumericIntUpDown
                    Name="input"
                    Classes="ClearButton"
                    InnerLeftContent="Age"
                    Step="1"
                    Watermark="Input Value"
                    Value="2" />
                <v:NumericDoubleUpDown
                    Name="inputDouble"
                    EmptyInputValue="1"
                    Step="0.5"
                    Value="3.1" />
                <v:NumericByteUpDown
                    Name="inputByte"
                    EmptyInputValue="1"
                    Step="1"
                    Value="3" />
                <v:NumericIntUpDown
                    Name="Drag_Int"
                    AllowDrag="True"
                    InnerLeftContent="Drag"
                    Step="1"
                    Watermark="Input Value"
                    Value="2" />

                <!--  hex demo  -->

                <!--  =================this is error usage  -->
                <v:NumericUIntUpDown
                    Name="uint_HexNumber"
                    AllowDrag="False"
                    FormatString="{}{0:X8}"
                    InnerLeftContent="HexNumber"
                    ParsingNumberStyle="HexNumber"
                    Step="1"
                    Watermark="Input Value"
                    Value="2" />

                <!--  =================we should use AllowHexSpecifier  -->
                <v:NumericUIntUpDown
                    Name="uint_AllowHexSpecifier"
                    HorizontalContentAlignment="Right"
                    AllowDrag="False"
                    FontFamily="Consolas"
                    FormatString="{}{0:X8}"
                    InnerLeftContent="AllowHexSpecifier"
                    ParsingNumberStyle="AllowHexSpecifier"
                    Step="1"
                    Watermark="AllowHexSpecifier"
                    Value="2" />

                <v:NumericUIntUpDown
                    Name="Consolas_uint"
                    HorizontalContentAlignment="Right"
                    AllowDrag="False"
                    FontFamily="Consolas"
                    FormatString="X8"
                    InnerLeftContent="0x"
                    ParsingNumberStyle="AllowHexSpecifier"
                    Step="1"
                    Watermark="AllowHexSpecifier"
                    Value="2" />

                <!--<TextBlock Text="{Binding #Read_uint.Value, StringFormat='IsShowReadButton {0}, hex={0:X}'}" />-->
                <v:NumericUIntUpDown
                    Name="Read_uint"
                    HorizontalContentAlignment="Right"
                    AllowDrag="False"
                    FontFamily="Consolas"
                    FormatString="X8"
                    InnerLeftContent="0x"
                    IsShowReadButton="True"
                    ParsingNumberStyle="AllowHexSpecifier"
                    Step="1"
                    Watermark="AllowHexSpecifier"
                    Value="2" />

                <!--<TextBox Text="{Binding #Write_uint.Value, StringFormat='IsShowWriteButton {0}, hex={0:X}'}" />-->
                <v:NumericUIntUpDown
                    Name="Write_uint"
                    HorizontalContentAlignment="Right"
                    AllowDrag="False"
                    FontFamily="Consolas"
                    FormatString="X8"
                    InnerLeftContent="0x"
                    IsShowWriteButton="True"
                    ParsingNumberStyle="AllowHexSpecifier"
                    Step="1"
                    Watermark="AllowHexSpecifier"
                    Value="2" />

                <!--<TextBox Text="{Binding #RW_uint.Value, StringFormat='R W Button {0}, hex={0:X}'}" />-->
                <v:NumericUIntUpDown
                    Name="RW_uint"
                    HorizontalContentAlignment="Right"
                    AllowDrag="False"
                    FontFamily="Consolas"
                    FormatString="X8"
                    InnerLeftContent="0x"
                    IsShowReadButton="True"
                    IsShowWriteButton="True"
                    ParsingNumberStyle="AllowHexSpecifier"
                    Step="1"
                    Watermark="AllowHexSpecifier"
                    Value="2" />
            </StackPanel>
        </Grid>

        <WrapPanel
            Grid.Row="0"
            Grid.RowSpan="2"
            Grid.Column="1"
            Margin="10"
            HorizontalAlignment="Left"
            Orientation="Vertical">

            <CheckBox Content="AutoWidth" IsChecked="{Binding AutoWidth}" />
            <v:NumericDoubleUpDown
                AllowDrag="True"
                InnerLeftContent="Width"
                IsEnabled="{Binding !AutoWidth}"
                Value="{Binding Width}" />

            <TextBox InnerLeftContent="FontFamily" Text="{Binding FontFamily}" />

            <Label Content="HorizontalAlignment" />
            <ComboBox ItemsSource="{Binding Array_HorizontalAlignment}" SelectedItem="{Binding HorizontalAlignment}" />
            <Label Content="HorizontalContentAlignment" />
            <ComboBox ItemsSource="{Binding Array_HorizontalContentAlignment}" SelectedItem="{Binding HorizontalContentAlignment}" />

            <TextBox
                InnerLeftContent="InnerLeftContent"
                InnerRightContent="obj"
                Text="{Binding InnerLeftContent}" />

            <TextBox InnerLeftContent="Watermark" Text="{Binding Watermark}" />

            <TextBox
                MinWidth="100"
                InnerLeftContent="FormatString"
                MaxLength="100"
                Text="{Binding FormatString}" />

            <Label Content="ParsingNumberStyle" />
            <ComboBox ItemsSource="{Binding Array_ParsingNumberStyle}" SelectedItem="{Binding ParsingNumberStyle}" />

            <v:NumericUIntUpDown
                Name="nudV"
                AllowSpin="True"
                InnerLeftContent="Value"
                IsEnabled="True"
                IsReadOnly="False"
                Value="{Binding Value, Mode=TwoWay}" />

            <v:NumericUIntUpDown InnerLeftContent="Max" Value="{Binding Maximum}" />

            <v:NumericUIntUpDown InnerLeftContent="Min" Value="{Binding Minimum}" />

            <Label Content="{Binding Step, StringFormat='Step {0}'}" />
            <Slider
                Minimum="1"
                ToolTip.Tip="{Binding Step}"
                Value="{Binding Step}" />

            <CheckBox Content="IsEnable" IsChecked="{Binding IsEnable}" />
            <CheckBox Content="AllowSpin" IsChecked="{Binding AllowSpin}" />
            <CheckBox Content="AllowDrag" IsChecked="{Binding AllowDrag}" />
            <CheckBox Content="ShowButtonSpinner" IsChecked="{Binding ShowButtonSpinner}" />

            <CheckBox Content="IsReadOnly" IsChecked="{Binding IsReadOnly}" />
            <CheckBox Content="IsUpdateValueWhenLostFocus" IsChecked="{Binding IsUpdateValueWhenLostFocus}" />
            <CheckBox Content="IsShowReadButton" IsChecked="{Binding IsShowReadButton}" />
            <CheckBox Content="IsShowWriteButton" IsChecked="{Binding IsShowWriteButton}" />

        </WrapPanel>
    </Grid>
</UserControl>